const TruffleAssert=require("truffle-assertions"),Ethers=require("ethers"),Helpers=require("../../helpers"),BridgeContract=artifacts.require("Bridge"),ERC721MintableContract=artifacts.require("ERC721MinterBurnerPauser"),ERC721HandlerContract=artifacts.require("ERC721Handler");contract("E2E ERC721 - Same Chain",async accounts=>{const relayerThreshold=2,domainID=1,depositerAddress=accounts[1],recipientAddress=accounts[2],relayer1Address=accounts[3],relayer2Address=accounts[4],tokenID=1,depositMetadata="0xc0ff33",expectedDepositNonce=1;let BridgeInstance,ERC721MintableInstance,ERC721HandlerInstance,initialResourceIDs,initialContractAddresses,burnableContractAddresses,resourceID,depositData,proposalData,depositProposalDataHash;beforeEach(async()=>{await Promise.all([BridgeContract.new(1,[relayer1Address,relayer2Address],2,100).then(instance=>BridgeInstance=instance),ERC721MintableContract.new("token","TOK","").then(instance=>ERC721MintableInstance=instance)]),resourceID=Helpers.createResourceID(ERC721MintableInstance.address,1),initialResourceIDs=[resourceID],initialContractAddresses=[ERC721MintableInstance.address],burnableContractAddresses=[],ERC721HandlerInstance=await ERC721HandlerContract.new(BridgeInstance.address),await BridgeInstance.grantRole("0x462c68c1ae0c4fca4fdc11dd843c86b7aec691fa624c1118775ca3028e1dad71",accounts[0]),await Promise.all([ERC721MintableInstance.mint(depositerAddress,1,"0xc0ff33"),BridgeInstance.adminSetResource(ERC721HandlerInstance.address,resourceID,ERC721MintableInstance.address)]),await ERC721MintableInstance.approve(ERC721HandlerInstance.address,1,{from:depositerAddress}),depositData=Helpers.createERCDepositData(1,20,recipientAddress),proposalData=Helpers.createERC721DepositProposalData(1,20,recipientAddress,"0xc0ff33".length,"0xc0ff33"),depositProposalDataHash=Ethers.utils.keccak256(ERC721HandlerInstance.address+proposalData.substr(2))}),it("[sanity] depositerAddress' should own tokenID",async()=>{const tokenOwner=await ERC721MintableInstance.ownerOf(1);assert.strictEqual(depositerAddress,tokenOwner)}),it("[sanity] ERC721HandlerInstance.address should have an allowance for tokenID from depositerAddress",async()=>{const allowedAddress=await ERC721MintableInstance.getApproved(1);assert.strictEqual(ERC721HandlerInstance.address,allowedAddress)}),it("depositAmount of Destination ERC721 should be transferred to recipientAddress",async()=>{await TruffleAssert.passes(BridgeInstance.deposit(1,resourceID,depositData,{from:depositerAddress}));const tokenOwner=await ERC721MintableInstance.ownerOf(1);assert.strictEqual(ERC721HandlerInstance.address,tokenOwner),await TruffleAssert.passes(BridgeInstance.voteProposal(1,1,resourceID,proposalData,{from:relayer1Address})),await TruffleAssert.passes(BridgeInstance.voteProposal(1,1,resourceID,proposalData,{from:relayer2Address}));const tokenOwnerAfterTransfer=await ERC721MintableInstance.ownerOf(1);assert.strictEqual(recipientAddress,tokenOwnerAfterTransfer)})});